<!--Introduction:
[-----------------]

React is a JavaScript library used for, building user interfaces, particularly for, single-page applications. It allows developers to create reusable UI components, manage application state efficiently, and update the view dynamically based on changes in data.

React uses a virtual DOM to optimize rendering, making it fast and responsive.

It's commonly used in web development to create interactive, scalable, and maintainable front-end applications.

It uses Jsx (JavaScript and Xml) : Js + Html

Usage of virtual DOM helps in simplifying the rendering process. without re rendering the entire page.

Things to Know before starting React:

        1) arrays
        2) objects
        3) arrow functions & es6 features
        4) classes
        5) Html

    We mainly use Funcitonal based components

    After creating components we need to import for further process

-->
<!--Download Instructions:
[-----------------]

    Install Node Js
    Open Cmd Prompt

    Write thes cmd's:       1) npm create vite@latest
                            2) Create file Name
                            3) Create Package Name (Optional)
                            4) Choose React
                            5) Choose Js ( For Beggining )
                            6) cd to current working or created folder.
                            7) npm install or npm i (alternative)
                            8) npm run dev ( to run on local server )
-->
<!--Folder Structure
[-----------------]


        1)node_modules : It contains exteranl libraries and packages that our project relies on.

        2)public: Contains any public Assests, i,e public fonts, images, videos.

        These are accesible through url. (These are not bundled)

        3)src folder:

                1)assets folder : It is similiar to public folder but the files in this folder gets bundled.

                2)Main.Jsx (Main Js file) & App.jsx (Component i.e being imported in Main and being rendered by passing(mounting) into root)

                3)Main.css and App.css for Main.jsx and App.jsx

                4)index.html file containing div elem with id of root i.e <div id="root"></div>

                  script or connection to Main Js file(Main.jsx)

                5)package.json file: These files are structured in key value pairs it describes
                                     about the project like (proj_Name, Version, Type, Private) or Not etc... -->

<!-- Work with js:
[-----------------]

    To insert Js we need to use {}

    And we create variables outside the return stat and within the component.

    For strings and values created outside we donot need {}

    but if declare inside return stat then we need {}


    Supporting Stat from ChatGpt:

        In React, here’s a concise explanation of the points:

                1. **Inserting JavaScript in JSX**: Use `{}` to embed JavaScript expressions inside JSX, like variables or functions.

                return <p>{name}</p>; // name is a JS variable


                2. **Variables outside vs inside `return`:**

                - **Outside `return`:** Declare variables normally. No need for `{}` outside JSX.
                - **Inside `return`:** Use `{}` to insert JS expressions within JSX.

                const name = "Alice"; // Outside return, no {}
                return <p>{name}</p>; // Inside return, use {}


                ### Additional Concept: **Component Props**

                - **Props** allow passing data to components:

                function Welcome(props) {
                    return <h1>Hello, {props.name}</h1>;
                }

                - Props make components reusable with different data.

-->

<!-- Components:
[-----------------]

### What is a Component in React?

A **component** in React is a reusable piece of UI that can accept inputs, known as **props**, and manages its own state. Components can be either **functional** or **class-based**. They enable modular development, making it easier to build and maintain user interfaces.

Here comp should start with Capital letter.

### Key Features:
- **Reusability**: Components can be reused throughout the application.
- **Encapsulation**: Each component manages its own logic and rendering.
- **Composition**: Components can contain other components, allowing for complex UIs.

### Example of a Functional Component:

```jsx

            import React from "react";

            const Greeting = ({ name }) => {
            return <h1>Hello, {name}!</h1>;
            };

            // Using the Greeting component
            const App = () => {
            return (
                <div>
                <Greeting name="Alice" />
                <Greeting name="Bob" />
                </div>
            );
            };

            export default App;
```

    ### Explanation of the Example:

    - **`Greeting` Component**: A functional component that accepts a `name` prop and displays a greeting message.

    - **`App` Component**: Renders two instances of the `Greeting` component with different names, demonstrating how components can be reused with different props.

    This modular approach simplifies building user interfaces by breaking them down into smaller, manageable pieces.


    We use fragments:  i.e   <></> to return mulitple componetns at once.


-->

<!-- How to Apply style React Comps with css
[-------------------------------------------]

    (It does'nt include frameworks or preprocessors)

    We can Apply in three ways:

            Modules(Seperate css file for every Comp), External, Inline.

    Here Strong Naming convention required for minimizing confusion.
 -->

<!-- Props:
[------------]

    props:  Read-Only properties that are shared between components.

            A parent comp can send data to a child comp.

        ex:   <Component key=value/>


Additional Info from ChatGpt containing defaultProp & propTypes:


### What are Props in React?

**Props** (short for "properties") are a mechanism in React that allows components to receive data and configuration from their parent components. They enable component reusability and dynamic rendering by passing information down the component tree.

### Key Features of Props:

    1. **Immutable**: Once set, props cannot be changed by the child component. This helps maintain a unidirectional data flow, making the app easier to understand and debug.

    2. **Passed from Parent to Child**: Props are passed as attributes when rendering a component, allowing child components to access them.

    3. **Data Types**: Props can be of any data type, including strings, numbers, arrays, objects, and even functions.

### Example of Using Props:

        Here’s a simple example to illustrate how props work:


                import React from "react";

                // Child component that accepts props

                    const Greeting = ({ name }) => {
                        return <h1>Hello, {name}!</h1>;
                    };

                // Parent component that passes props to the child

                    const App = () => {
                    return (
                        <div>
                        <Greeting name="Alice" />
                        <Greeting name="Bob" />
                        <Greeting name="Charlie" />
                        </div>
                    );
                };

                export default App;


### Explanation of the Example:

        - **`Greeting` Component**: A functional component that accepts a `name` prop and displays a greeting message using that name.

        - **`App` Component**: The parent component renders multiple instances of the `Greeting` component, each with a different `name` prop. This demonstrates how the same component can be reused with different data.


### Additional Points:

    - **Default Props**: You can set default values for props using the `defaultProps` property.


                    Greeting.defaultProps = {
                        name: "Guest", // Default name if none is provided
                    };


    **Prop Types**: To enforce type checking for props, you can use the `prop-types` package. This helps catch bugs by validating the data types of props passed to components.


                    import PropTypes from "prop-types";

                    Greeting.propTypes = {
                        name: PropTypes.string.isRequired, // name must be a string and is required
                    };

### Summary:

        Props are fundamental in React for building dynamic and reusable components. By enabling data flow from parent to child components, props help create interactive user interfaces while maintaining a clear structure.
 -->

<!-- Conditional Rendering:
[-------------------------]

### What is Conditional Rendering in React?

**Conditional rendering** in React refers to the ability to render different UI elements or components based on certain conditions. This allows you to create dynamic user interfaces that respond to user interactions or application state.

### Key Concepts:

        1. **JavaScript Logic**: You can use standard JavaScript conditional statements, such as `if`, `else`, and the ternary operator (`? :`), to determine which components or elements to render.

        2. **Boolean State**: Often, you'll use state variables to control what gets rendered, allowing for interactivity based on user actions.

### Common Methods of Conditional Rendering:

1. **Using the Ternary Operator**:
   This is a concise way to render one of two elements based on a condition.

   ```jsx
   const Greeting = ({ isLoggedIn }) => {
     return (
       <div>
         {isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please log in.</h1>}
       </div>
     );
   };
   ```

2. **Using `if-else` Statements**:
   You can use regular `if` statements to determine what to render, often done before the `return` statement.

   ```jsx
   const UserStatus = ({ isLoggedIn }) => {
     let message;

     if (isLoggedIn) {
       message = <h1>Welcome back!</h1>;
     } else {
       message = <h1>Please log in.</h1>;
     }

     return <div>{message}</div>;
   };
   ```

3. **Logical AND (`&&`) Operator**:
   You can conditionally render an element only if a certain condition is true.

   ```jsx
   const Notification = ({ hasNotifications }) => {
     return (
       <div>
         {hasNotifications && <h2>You have new notifications!</h2>}
       </div>
     );
   };
   ```

4. **Switch Statements**:
   For more complex conditions, a `switch` statement can be useful.

   ```jsx
   const UserRole = ({ role }) => {
     switch (role) {
       case "admin":
         return <h1>Admin Panel</h1>;
       case "user":
         return <h1>User Dashboard</h1>;
       default:
         return <h1>Welcome Guest</h1>;
     }
   };
   ```

### Example of Conditional Rendering:
Here’s a simple component that demonstrates conditional rendering based on user authentication:

```jsx
import React, { useState } from "react";

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  return (
    <div>
      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>
        {isLoggedIn ? "Log Out" : "Log In"}
      </button>
      {isLoggedIn ? (
        <h1>Welcome back!</h1>
      ) : (
        <h1>Please log in to continue.</h1>
      )}
    </div>
  );
};

export default App;
```

### Explanation of the Example:

- The component uses a button to toggle the `isLoggedIn` state.
- Depending on the state of `isLoggedIn`, it conditionally renders either a welcome message or a prompt to log in.

### Summary:

        Conditional rendering is a powerful feature in React that allows developers to build dynamic and interactive user interfaces. By using conditional logic within components, you can control what gets displayed based on user input or application state, making your applications more responsive and user-friendly.

 -->
